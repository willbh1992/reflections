What happens when you initialize a repository? Why do you need to do it?

	It creates a .git repository inside the directory you intialize it in
	after which you can then start saving commits and use git functions on that directory which is now a repository. Do it so you can use git funtions to track commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	It is the intermediary area where you can choose what content comprises a commit allowing you the ability to logical partitio commits so that they make sense to the reader and yourself. Allows clean organization of commitsif 

How can you use the staging area to make sure you have one commit per logical
change?

	The staging area will show which files have been modified and added to be committed, you can then use git diff and git diff --staged to see what those changes were, if those changes make sense and can be logically labeled then they should be commited under said label if not then you can redo the process until you have a logical commit lined up for categorization

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When you want to try new things but don't want to mess up any working version of what you alreay have it will allow you to make changes that could not work yet retain the working structure in the master branch. Would also show the process of a working code then experimentation and then once that experiment works or doesn;t work the reader will see if it was then integrated or not inot the master branch. Shows the logical history of your repository and whatever project you were working on.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?